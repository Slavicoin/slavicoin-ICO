'use strict';

const environment = require('app/common/environment/environment.service').environment,
  winston = require('winston'),
  dailyRotate = require('winston-daily-rotate-file'),
  transports = [];

let logger;

winston.transports.DailyRotateFile =dailyRotate;

function logFormatter(options) {
  return '************************************************************************************************************************\n' +
    options.level.toUpperCase() + ' ' + options.timestamp() +
    (undefined !== options.message ? '\n\n' + options.message : '') +
    (options.meta && Object.keys(options.meta).length ? JSON.stringify(options.meta) : '');
}

function createTransports() {
  const productionTransport = new winston.transports.DailyRotateFile({
      name: 'production-log',
      datePattern: 'YYYY-MM-DD',
      prepend: true,
      level: 'warn',
      filename: __dirname + '/logs/%DATE%.log.txt',
      handleExceptions: true,
      timestamp: function () {
        return new Date();
      },
      formatter: logFormatter,
      json: false,
      prettyPrint: true,
      maxsize: 5242880,
      colorize: false
    }),
    testingTransport = new winston.transports.DailyRotateFile({
      name: 'testing-log',
      datePattern: 'YYYY-MM-DD',
      prepend: true,
      level: 'info',
      filename: __dirname + '/logs/%DATE%.log.txt',
      handleExceptions: true,
      timestamp: function () {
        return new Date();
      },
      formatter: logFormatter,
      json: false,
      prettyPrint: true,
      maxsize: 5242880,
      colorize: false
    }),
    consoleTransport = new winston.transports.Console({
      level: 'debug',
      handleExceptions: true,
      prettyPrint: true,
      json: false,
      colorize: true
    });


  if (environment === 'development') {
    transports.push(testingTransport);
    transports.push(consoleTransport);
  } else if (environment === 'testing') {
    transports.push(testingTransport);
  } else if (environment === 'production') {
    transports.push(productionTransport);
  } else {
    transports.push(testingTransport);
    transports.push(consoleTransport);
  }
}

function getInstance() {
  if (!logger) {
    createTransports();
    logger = winston.createLogger({
      transports: transports,
      exitOnError: false
    });
  }

  return logger;
}

module.exports = getInstance();
